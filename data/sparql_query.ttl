CONSTRUCT {
?provname eona:imports ?provnameImports.
}

WHERE {
?s a eona:Ontology;
eona:isProvidedBy ?prov;
eona:isNamed ?name;
eona:imports ?imports, ?importsWithoutName.

?imports eona:isNamed ?nameImports;
eona:isProvidedBy ?provImports.

FILTER NOT EXISTS {
      ?importsWithoutName eona:isNamed ?x
   }

# exclude reflexive triples:
#FILTER(!(?s = ?imports))

# exclude standard imports:
FILTER( ! (?imports = <http://www.w3.org/2002/07/owl>) )
FILTER( ! (?imports =<http://www.w3.org/2001/XMLSchema>) )
FILTER( ! (?imports =<http://www.w3.org/XML/1998/namespace>) )
FILTER( ! (?imports =<http://www.w3.org/2000/01/rdf-schema>) )
FILTER( ! (?imports =<http://www.w3.org/1999/02/22-rdf-syntax-ns>) )

FILTER( ! (?importsWithoutName = <http://www.w3.org/2002/07/owl>) )
FILTER( ! (?importsWithoutName =<http://www.w3.org/2001/XMLSchema>) )
FILTER( ! (?importsWithoutName =<http://www.w3.org/XML/1998/namespace>) )
FILTER( ! (?importsWithoutName =<http://www.w3.org/2000/01/rdf-schema>) )
FILTER( ! (?importsWithoutName =<http://www.w3.org/1999/02/22-rdf-syntax-ns>) )


# concat provider and name of the ontology
BIND(CONCAT(?prov, '\n', ?name) AS ?provname)
BIND(CONCAT(?provImports, '\n', ?nameImports) AS ?provnameImports)
BIND(?importsWithoutName as ?provnameImports)
       }
